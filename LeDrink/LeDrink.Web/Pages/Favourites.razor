@page "/favourites"
@using LeDrink.DAL.Interfaces
@using LeDrink.DAL.Models
@using Blazorise.Animate
@inject IUnitOfWork _uow

<head>
    <link rel="stylesheet" href="/css/caro.css">
</head>

<div class="container" >
    <div class="row">
        <div class="col-2">
            <button class="btn btn-primary"  @onclick="LastCard">Last</button>
        </div>
        <div class="col-8">
            @if(_currentDrink != null)
            {
                <RadzenCard class="center" Style="width: 100%; height: 100%">
                    <div class="d-flex align-items-center">
                        <div class="image"> <RadzenImage Path="@_currentDrink.ImgPath" Class="rounded-circle" Style="width:150px; height: 150px; object-fit:cover;" /></div>
                        <div class="ml-3 w-100">
                            <h4 class="mb-0 mt-0">@_currentDrink.DrinkName (@_currentDrink.TotalMl)  </h4>
                            <div class="p-2 mt-2 bg-primary d-flex justify-content-between rounded text-white stats">
                                @foreach(var mix in _currentDrink.Mixes)
                                {
                                    <div class="d-flex flex-column"> <span class="articles">@mix.Bottle.BottleName</span> <span class="number1">@mix.Milliliters</span> </div>
                                }
                            </div>
                            <div class="button mt-2 d-flex flex-row align-items-center">
                            <Button @onclick="(() => MakeDrink(_currentDrink))" Type="@AntDesign.ButtonType.Primary" Class="w-100">
                                MAKE DRINK
                            </Button>
                             </div>
                        </div>
                    </div>
                </RadzenCard>
            }
        </div>
        <div class="col-2">
            <button class="btn btn-primary" @onclick="NextCard">Next</button>
        </div>
    </div>
    </div>


@code {
    private List<Drink> _favDrinks = null;
    private Drink _currentDrink = null;
    private int _currentDrinkIndex = 0;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadDrinks();
            await NextCard();
        }
    }

    private async Task LoadDrinks()
    {
        _favDrinks = (await _uow.DrinkRepo.GetDrinks()).Where(d => d.IsFavourite == true).ToList();
    }

    private async Task LastCard()
    {
        if(_currentDrinkIndex - 1  < 0)
        {
            // Sets cur index to max if its the first drink in the index
            _currentDrinkIndex = _favDrinks.Count()-1;
            _currentDrink = _favDrinks[_currentDrinkIndex];
            return;
        }
        _currentDrinkIndex--;
        _currentDrink = _favDrinks[_currentDrinkIndex];
    }

    private async Task NextCard()
    {
        if(_currentDrinkIndex + 1  > _favDrinks.Count() - 1)
        {
            // Sets cur index to first if its the last drink in the index
            _currentDrinkIndex = 0;
            _currentDrink = _favDrinks[_currentDrinkIndex];
            return;
        }
        _currentDrinkIndex++;

        // Load bottles for mix
        foreach(var mix in _favDrinks[_currentDrinkIndex].Mixes)
        {
            mix.Bottle = await _uow.BottleRepo.GetBottle(mix.bottleId);
        }

        _currentDrink = _favDrinks[_currentDrinkIndex];
    }
        
    private async Task MakeDrink(Drink drink)
    {
        await _uow.RaspiRepo.MakeDrink(drink);
    }
}
