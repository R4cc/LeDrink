@page "/"
@using LeDrink.DAL.Interfaces
@using LeDrink.DAL.Models
@inject IUnitOfWork _uow

<PageTitle>Lé Drink</PageTitle>

<div class="container" style="margin-right: 15%; margin-left: 15%; justify-content: center">
    <div class="row">
        <RadzenButton Icon="plus" Click="(() => UnFavDrink(drink.Id))" ButtonStyle="ButtonStyle.Primary"/>
        <!-- Favourite Drinks -->
        <h1>Favourite Drinks</h1>
        @foreach(var drink in _favDrinks)
        {
            <RadzenCard style="width: 15%;">
                <h3 class="h5">@drink.DrinkName</h3>
                <div class="d-flex flex-row">
                    <RadzenImage Path="@drink.ImgPath" Class="rounded-circle float-left mr-3" Style="width: 40%; height: 40%;" />
                    <div>
                        <div class="row">
                            <div>Composition</div>
                            @foreach(var mix in drink.Mixes)
                            {
                                <b>@(mix.Bottle.BottleName + ": " + mix.Milliliters + "ml")</b>
                            }
                        </div>
                        <div class="row">
                            <div >
                                <RadzenButton Icon="launch" Click="(() => EditDrink(drink.Id))" ButtonStyle="ButtonStyle.Primary"/>
                                <RadzenButton Icon="grade" Click="(() => UnFavDrink(drink.Id))" ButtonStyle="ButtonStyle.Primary"/>
                            </div>
                        </div>
                    </div>
                </div>
            </RadzenCard>
        }
    </div>
    <hr />
    <br/>
    <div class="row">
        <h1>Other Drinks</h1>
        <!-- Non Favourite Drinks -->
        @foreach(var drink in _nonFavDrinks)
        {
            <RadzenCard class="m-3" style="width: 18rem;">
                <h3 class="h5">@drink.DrinkName</h3>
                <div class="d-flex flex-row">
                    <RadzenImage Path="@drink.ImgPath" Class="rounded-circle float-left mr-3" Style="width: 150px; height: 150px;" />
                    <div>
                        <div class="row">
                            <div>Composition</div>
                            @foreach(var mix in drink.Mixes)
                            {
                                <b>@(mix.Bottle.BottleName + ": " + mix.Milliliters + "ml")</b>
                            }
                        </div>
                        <div class="row">
                            <div >
                                <RadzenButton Icon="launch" Click="(() => EditDrink(drink.Id))" ButtonStyle="ButtonStyle.Primary"/>
                                <RadzenButton Icon="grade" Click="(() => FavDrink(drink.Id))" ButtonStyle="ButtonStyle.Primary"/>
                            </div>
                        </div>
                    </div>
                </div>
            </RadzenCard>
        }
    </div>
    @if (_showModal && _drinkInModal != null && !isEdit)
    {
        <LeDrink.Web.Shared.Components.Modal _drink="_drinkInModal" OnValidSubmit="OnValidSubmitCreate" HeaderText="Create Drink"/>
    }
    @if (_showModal && _drinkInModal != null && isEdit)
    {
        <LeDrink.Web.Shared.Components.Modal _drink="_drinkInModal" OnValidSubmit="OnValidSubmitEdit" HeaderText="Edit Drink"/>
    }
</div>




@code{
    private List<Drink> _favDrinks = new List<Drink>();
    private List<Drink> _nonFavDrinks = new List<Drink>();

    private bool _showModal { get; set; }
    private Drink _drinkInModal { get; set; }
    private bool isEdit { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await SeedTestDrinks();
        await LoadDrinks();
    }

    private async Task LoadDrinks()
    {
        // Load from repo
        var _allDrinks = await _uow.DrinkRepo.GetDrinks();
        _favDrinks = _allDrinks.Where(d => d.IsFavourite == true).ToList();
        _nonFavDrinks = _allDrinks.Where(d => d.IsFavourite == false).ToList();
    }

    private async Task SeedTestDrinks()
    {
        for(int i = 0; i <= 10; i++)
        {
            var lst = new List<Mix>();
            lst.Add(new Mix {
                    Bottle = new Bottle
                    {
                        Id = 1,
                        BottleName = "Coca Cola",
                        BottleSlotId = 1,
                    },
                    Milliliters = 250d,
                });

            lst.Add(new Mix {
                    Bottle = new Bottle
                    {
                        Id = 1,
                        BottleName = "Fanta",
                        BottleSlotId = 2,
                    },
                    Milliliters = 250d,
                });

            var drink = new Drink()
                {
                    Id = i,
                    DrinkName = $"Spezi + {i}",
                    ImgPath = "https://www.spezi.com/wp-content/uploads/thumbnail-logo-spezi-original.jpg",
                    Price = 25,
                    Mixes = lst
            };
            _favDrinks.Add(drink);
        }
    }

    private void EditDrink(int drinkId)
    {
        isEdit = true;
        _drinkInModal = _favDrinks.FirstOrDefault(x => x.Id == drinkId);
        _showModal = true;
    }

    private async Task SaveEditDrinkOnValidSubmit(Drink drink)
    {
        // Save changes to DB
        await _uow.DrinkRepo.UpdateDrink(drink);
    }

    private void CreateDrink()
    {
        isEdit = false;
        _drinkInModal = new();
        _showModal = true;
    }

    private async Task OnValidSubmitCreate(Drink drink)
    {
        // Create new Drink
        await _uow.DrinkRepo.UpdateDrink(drink);
    }

    private async Task OnValidSubmitEdit(Drink drink)
    {
        // Update existing Drink
        await _uow.DrinkRepo.UpdateDrink(drink);
    }

    private async Task FavDrink(int drinkId)
    {
        
    }

    private async Task UnFavDrink(int drinkId)
    {
        
    }

    private async Task RemoveDrink(int drinkId)
    {
        
    }
}





