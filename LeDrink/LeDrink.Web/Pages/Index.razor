@page "/"
@using LeDrink.DAL.Interfaces
@using LeDrink.DAL.Models
@inject IUnitOfWork _uow

<PageTitle>Lé Drink</PageTitle>
    <div class="container" style="margin-right: 10%; margin-left: 10%;">

        <div class="row">
            <button class="btn btn-primary oi oi-plus"/>
            <!-- Favourite Drinks -->
        <h1>Favourite Drinks</h1>
            @foreach (var drink in _favDrinks)
            {
                <RadzenCard class="m-3" style="width: 18rem;">
                    <h3 class="h5">@drink.DrinkName</h3>
                    <div class="d-flex flex-row">
                        <RadzenImage Path="@drink.ImgPath" Class="rounded-circle float-left" Style=" width: 150px; height: 150px;" />
                        <div>
                            <div class="row">
                                <div>Composition</div>
                                @foreach (var mix in drink.Mixes)
                                {
                                    <b>@(mix.Bottle.BottleName + ": " + mix.Milliliters + "ml")</b>
                                }
                            </div>
                            <div class="row">
                                <div >
                                    <RadzenButton Icon="launch" Click="(() => EditDrink(drink.Id))" ButtonStyle="ButtonStyle.Primary"/>
                                    <RadzenButton Icon="grade" Click="(() => FavDrink(drink.Id))" ButtonStyle="ButtonStyle.Primary"/>
                                </div>
                            </div>
                        </div>
                    </div>
                </RadzenCard>
            }
        </div>
        <hr />
        <br/>
        <div class="row">
            <h1>Other Drinks</h1>
            <!-- Non Favourite Drinks -->
            @foreach (var drink in _nonFavDrinks)
            {
                <RadzenCard class="m-3" style="width: 18rem;">
                    <h3 class="h5">@drink.DrinkName</h3>
                    <div class="d-flex flex-row">
                        <RadzenImage Path="@drink.ImgPath" Class="rounded-circle float-left mr-3" Style=" width: 150px; height: 150px;" />
                        <div>
                            <div class="row">
                                <div>Composition</div>
                                @foreach (var mix in drink.Mixes)
                                {
                                    <b>@(mix.Bottle.BottleName + ": " + mix.Milliliters + "ml")</b>
                                }
                            </div>
                            <div class="row">
                                <div >
                                    <RadzenButton Icon="launch" Click="(() => EditDrink(drink.Id))" ButtonStyle="ButtonStyle.Primary"/>
                                    <RadzenButton Icon="grade" Click="(() => FavDrink(drink.Id))" ButtonStyle="ButtonStyle.Primary"/>
                                </div>
                            </div>
                        </div>
                    </div>
                </RadzenCard>
            }
        </div>
        @if (_showModal && _drinkInModal != null && !isEdit)
        {
            <LeDrink.Web.Shared.Components.Modal _drink="_drinkInModal" OnValidSubmit="OnValidSubmitCreate" HeaderText="Create Drink"/>
        }
        @if (_showModal && _drinkInModal != null && isEdit)
        {
            <LeDrink.Web.Shared.Components.Modal _drink="_drinkInModal" OnValidSubmit="OnValidSubmitEdit" HeaderText="Edit Drink"/>
        }
    </div>


@code{
    private List<Drink> _favDrinks = new List<Drink>();
    private List<Drink> _nonFavDrinks = new List<Drink>();

    private bool _showModal { get; set; }
    private Drink _drinkInModal { get; set; }
    private bool isEdit { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadDrinks();
    }

    private async Task LoadDrinks()
    {
        // Load from repo
        var _allDrinks = await _uow.DrinkRepo.GetDrinks();

        // Add mixes to drinks
        foreach(var drink in _allDrinks)
        {
            drink.Mixes = await _uow.MixRepo.GetMixesFromDrinkId(drink.Id);
        }

        // Favourite status Loading
        _favDrinks = _allDrinks.Where(d => d.IsFavourite == true).ToList();
        _nonFavDrinks = _allDrinks.Where(d => d.IsFavourite == false).ToList();
    }

    private void EditDrink(int drinkId)
    {
        isEdit = true;
        _drinkInModal = _favDrinks.FirstOrDefault(x => x.Id == drinkId);
        _showModal = true;
    }

    private void CreateDrink()
    {
        isEdit = false;
        _drinkInModal = new();
        _showModal = true;
    }

    private async Task OnValidSubmitCreate(Drink drink)
    {
        if(drink is null)
        {
            await CancelSubmit();
            return;
        }

        // Create new Drink
        await _uow.DrinkRepo.AddDrink(drink);
        await _uow.SaveChanges();
        _showModal = false;
        _drinkInModal = null;
    }

    private async Task OnValidSubmitEdit(Drink drink)
    {
        if(drink is null)
        {
            await CancelSubmit();
            return;
        }

        // Update existing Drink
        await _uow.DrinkRepo.UpdateDrink(drink);
        await _uow.SaveChanges();
        _showModal = false;
        _drinkInModal = null;
    }

    private async Task CancelSubmit()
    {
        _showModal = false;
        _drinkInModal = null;
    }


    private async Task FavDrink(int drinkId)
    {
        
    }

    private async Task UnFavDrink(int drinkId)
    {
        
    }

    private async Task RemoveDrink(int drinkId)
    {
        
    }
}