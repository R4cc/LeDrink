@page "/"
@using LeDrink.DAL.Interfaces
@using LeDrink.DAL.Models
@inject IUnitOfWork _uow

<PageTitle>Lé Drink</PageTitle>

<div class="container">

<!-- BOTTLES -->
    <div class="row" >
         <RadzenImage Path="big_logo.svg"  Style="width:50%; margin-top: 0.5rem; margin-bottom: 1.5rem;" />
        <Title Type="1">Current Bottles in Machine</Title>
        <div class="card-container">
        @foreach (var bottle in _allBottles.Where(b => b.BottleSlotId is not null))
        {
            <RadzenCard style="width: 46%; cursor: pointer; margin: 2%" @onclick="@(() => ChangeBottleInSlot(bottle))">
                <div class="container" style="text-align: center;">
                    <div class="row">
                        <h2>@($"SLOT {@bottle.BottleSlotId}")</h2>
                    </div>
                        <br/>
                    <div class="row" style="justify-content: center">
                        <RadzenImage Path="@bottle.ImgPath" Style="object-fit:cover; height: auto; width: 85 %" />
                    </div>
                        <br/>
                    <div class="row">
                        <h4>@bottle.BottleName</h4> 
                        <Text>@($"{bottle.CurrentMl} / {bottle.MaxMl}ml ")</Text>
                    </div>
                </div>
            </RadzenCard> 
        }
    </div>
    </div>
    <br/>
    <br/>

<!-- DRINKS -->
    <div class="row" >
        <Title Type="1">Drinks</Title>
        <Button Shape="@ButtonShape.Round" Type="@AntDesign.ButtonType.Primary" Class="w-50" Style="margin-left: 1rem;" @onclick="CreateDrink">+ Create a new Drink</Button>
    </div>
    <hr/>
    <div class="row" >
            <!-- Favourite Drinks -->
            <Title Type="3">Favourite Drinks</Title>
            <div class="card-container">
            @foreach (var drink in _drinks.Where(b => b.IsFavourite == true)) 
            {
                    <RadzenCard class="center" Style="width: 100%; margin: 2%">
                    <div class="d-flex ">
                        <div class="image"><RadzenImage Path="@drink.ImgPath" Class="rounded-circle" Style="width:150px; height: 150px; object-fit:cover;" /></div>
                        <div class="ml-3 w-100">
                            <Button style="position:absolute; top:0; right:0; margin-right: 2%; margin-top: 2%" Type="@AntDesign.ButtonType.Primary" Danger Shape="@ButtonShape.Circle" @onclick="(() => ToggleFavDrink(drink))"><RadzenIcon Icon="favorite" Style="margin-top: 1px;"/></Button>
                            <h4>@drink.DrinkName</h4>
                            <div class="p-2 mt-2 bg-primary justify-content-between rounded text-white stats" >
                                @foreach(var mix in drink.Mixes)
                                {
                                    <div class=""> 
                                        <a>@mix.Bottle.BottleName</a>
                                        <a class="number1" style="float: right;">@mix.Milliliters @(" ml")</a> 
                                    </div>
                                }
                            </div>
                                <div style="margin-top: 5%">
                                <Button @onclick="(() => EditDrink(drink))" Type="@AntDesign.ButtonType.Primary" Shape="@AntDesign.ButtonShape.Round" Class="w-100 ">
                                    Edit ✎
                                </Button>
                                </div>
                        </div>
                    </div>
                </RadzenCard>
            }
            </div>
    </div>

    <br/>
    <hr />
    <br/>

    <!-- Other Drinks -->
   <div class="row" >
            <Title Type="3">Other Drinks</Title>
            <div class="card-container">
            @foreach (var drink in _drinks.Where(b => b.IsFavourite == false))
            {
                    <RadzenCard class="center" Style="width: 100%; margin: 2%">
                    <div class="d-flex ">
                        <div class="image"> <RadzenImage Path="@drink.ImgPath" Class="rounded-circle" Style="width:150px; height: 150px; object-fit:cover;" /></div>
                        <div class="ml-3 w-100">
                            <Button style="position:absolute; top:0; right:0; margin-right: 2%; margin-top: 2%" Type="@AntDesign.ButtonType.Primary" Shape="@ButtonShape.Circle" Danger @onclick="(() => ToggleFavDrink(drink))"><RadzenIcon Icon="favorite_border" Style="margin-top: 1px;"/></Button>
                            <h4>@drink.DrinkName</h4>
                            <div class="p-2 mt-2 bg-primary justify-content-between rounded text-white stats" >
                                @foreach(var mix in drink.Mixes)
                                {
                                    <div class=""> 
                                        <a>@mix.Bottle.BottleName</a>
                                        <a class="number1" style="float: right;">@mix.Milliliters @(" ml")</a> 
                                    </div>
                                }
                            </div>
                                <div style="margin-top: 5%">
                                <Button @onclick="(() => EditDrink(drink))" Type="@AntDesign.ButtonType.Primary" Shape="@AntDesign.ButtonShape.Round" Class="w-100 ">
                                    Edit ✎
                                </Button>
                                </div>
                        </div>
                    </div>
                </RadzenCard>
            }
        </div>
    </div>


    <!-- DRINK MODAL LOGIC-->
    @if (_showCreateDrinkModal && _drinkInModal != null)
    {
        <LeDrink.Web.Shared.Components.CreateDrinkModal _drink="_drinkInModal" OnValidSubmit="ValidSubmitCreateDrink"/>
    }
    @if (_showEditDrinkModal && _drinkInModal != null)
    {
        <LeDrink.Web.Shared.Components.EditDrinkModal _drink="_drinkInModal" OnValidSubmit="ValidSubmitEditDrink"/>
    }


    <!-- BOTTLE MODAL LOGIC-->
    @if (_showBottleCrudModal && _bottleInCrudModal != null && !_bottleCrudModalIsEdit)
    {
        <LeDrink.Web.Shared.Components.BottleModal _drink="_drinkInModal" OnValidSubmit="ValidSubmitCreateBottle" HeaderText="Create Bottle"/>
    }
    @if (_showBottleCrudModal && _bottleInCrudModal != null && _bottleCrudModalIsEdit)
    {
        <LeDrink.Web.Shared.Components.BottleModal _selectedBottle="_bottleInCrudModal" OnValidSubmit="ValidSubmitEditBottle" HeaderText="Edit DrinkBottle"/>
    }


    <!-- Change bottle in Slot -->
    @if (_showChangeBottleModal && _selectedSlotId != null)
    {
        <LeDrink.Web.Shared.Components.ChangeBottleModal BottleSlotId="_selectedSlotId" _allBottles=_allBottles _selectedBottle=_chosenBottle OnValidSubmit=ValidSubmitSlotChange/>
    }
</div>

    <style>
.stats {
    background: #f2f5f8 !important;
    color: #000 !important
}

.articles {
    font-size: 10px;
    color: #a1aab9
}

.number1 {
    font-weight: 500
}

.followers {
    font-size: 10px;
    color: #a1aab9
}

.number2 {
    font-weight: 500
}

.rating {
    font-size: 10px;
    color: #a1aab9
}

.number3 {
    font-weight: 500
}
    </style>

@code{
    // Global Site Data
    private List<Drink> _drinks = new();
    private List<Bottle> _allBottles = new();

    // Drink Modals
    private Drink _drinkInModal { get; set; }
    private bool _showEditDrinkModal { get; set; }
    private bool _showCreateDrinkModal { get; set; }

    // Edit Bottle Modal
    // Create Bottle Modal
    private bool _showBottleCrudModal { get; set; }
    private Bottle _bottleInCrudModal { get; set; }
    private bool _bottleCrudModalIsEdit { get; set; }

    // Change Slot Modal
    private bool _showChangeBottleModal { get; set; }
    private int _selectedSlotId { get; set; }
    private Bottle _chosenBottle = new();


    protected override async Task OnInitializedAsync()
    {
        await LoadActiveBottles();
        await LoadAllDrinks();
    }

    /// --------------------------------------------
    /// INITIALIZING (Loading, Refreshing)
    /// --------------------------------------------

    private async Task LoadAllDrinks()
    {
        // load drinks from repo
        _drinks = await _uow.DrinkRepo.GetDrinks();
    }

    private async Task LoadActiveBottles()
    {
        _allBottles = (await _uow.BottleRepo.GetBottles())
                                .OrderBy(b => b.BottleSlotId).ToList();
    }

    private async Task RefreshData()
    {
        await LoadActiveBottles();
        await LoadAllDrinks();
    }    

    /// --------------------------------------------
    /// CRUD ACTIONS (Create, Remove, Update, etc.)
    /// --------------------------------------------

    private async Task ChangeBottleInSlot(Bottle bottle)
    {
        _chosenBottle = bottle;
        _selectedSlotId = (int)bottle.BottleSlotId;
        _showChangeBottleModal = true;
    }

    private void EditDrink(Drink drink)
    {
        _drinkInModal = drink;
        _showEditDrinkModal = true;
    }

    private void CreateDrink()
    {
        _drinkInModal = new()
        {
            Mixes = new List<Mix>()
        };
        _showCreateDrinkModal = true;
    }

    private async Task ToggleFavDrink(Drink drink)
    {
        drink.IsFavourite = !drink.IsFavourite;

        await RefreshData();
    }


    private async Task RemoveDrink(Drink drink)
    {
        await _uow.DrinkRepo.RemoveDrink(drink);
        await _uow.SaveChanges();

        await RefreshData();
    }

    private async Task MakeDrink(Drink drink)
    {
        await _uow.RaspiRepo.MakeDrink(drink);
    }

    /// --------------------------------------------
    /// COMPONENT SUBMIT HANDLERS
    /// --------------------------------------------

    private async Task ValidSubmitCreateDrink(Drink drink)
    {
        if(drink is null)
        {
            await CancelSubmit();
            return;
        }

        // Create new Drink
        await _uow.DrinkRepo.AddDrink(drink);
        await _uow.SaveChanges();
        _showCreateDrinkModal = false;
        _drinkInModal = null;

        await RefreshData();
    }

    private async Task ValidSubmitEditDrink(Drink drink)
    {
        if(drink is null)
        {
            await CancelSubmit();
            return;
        }

        // Update existing Drink
        await _uow.DrinkRepo.UpdateDrink(drink);
        await _uow.SaveChanges();
        _showEditDrinkModal = false;
        _drinkInModal = null;

        await RefreshData();
    }

    private async Task ValidSubmitCreateBottle(Bottle bottle)
    {
        if(bottle is null)
        {
            await CancelSubmit();
            return;
        }

        // Create new Drink
        await _uow.BottleRepo.AddBottle(bottle);
        await _uow.SaveChanges();
        _showBottleCrudModal = false;
        _bottleInCrudModal = null;

        await RefreshData();
    }

    private async Task ValidSubmitEditBottle(Bottle bottle)
    {
        if(bottle is null)
        {
            await CancelSubmit();
            return;
        }

        // Update existing Drink
        await _uow.BottleRepo.UpdateBottle(bottle);
        await _uow.SaveChanges();
        _showBottleCrudModal = false;
        _bottleInCrudModal = null;

        await RefreshData();
    }

    private async Task ValidSubmitSlotChange(Bottle bottle)
    {
        if(bottle is null)
        {
            await CancelSubmit();
            return;
        }

        _chosenBottle.BottleSlotId = null;

        // Update drink
        await _uow.BottleRepo.UpdateBottle(_chosenBottle);
        await _uow.BottleRepo.UpdateBottle(bottle);
        await _uow.SaveChanges();
        _showChangeBottleModal = false;
        _chosenBottle = null;
        _selectedSlotId = 0;

        await RefreshData();
    }

    private async Task CancelSubmit()
    {
        _showCreateDrinkModal = false;
        _drinkInModal = null;

        _showBottleCrudModal = false;
        _bottleInCrudModal = null;

        _showChangeBottleModal = false;
        _chosenBottle = null;
        _selectedSlotId = 0;

        await RefreshData();
    }



}