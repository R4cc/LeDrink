@page "/"
@using LeDrink.DAL.Interfaces
@using LeDrink.DAL.Models
@using LeDrink.Web.Shared.Components

@inject IStringLocalizer<Index> Loc
@inject IUnitOfWork _uow
@inject Radzen.NotificationService NotificationService
@inject NavigationManager Nav


<PageTitle>Lé Drink</PageTitle>

<div class="container">

<!-- BOTTLES -->
    <div class="row" >
         <RadzenImage Path="big_logo.svg"  Style="width:50%; margin-top: 0.5rem; margin-bottom: 1.5rem;" />
        <Title Type="1">@Loc["CurrentBottles"]</Title>
        <div class="card-container">
        @foreach (var bottle in _allBottles.Where(b => b.BottleSlotId is not null))
        {
            <RadzenCard style="width: 46%; cursor: pointer; margin: 2%" @onclick="@(() => ChangeBottleInSlot(bottle))">
                <div class="container" style="text-align: center;">
                    <div class="row">
                        <h2>@($"SLOT {@bottle.BottleSlotId}")</h2>
                    </div>
                        <br/>
                    <div class="row" style="justify-content: center">
                        <RadzenImage Path="@bottle.ImgPath" Style="object-fit:cover; height: auto; width: 85%" />
                    </div>
                        <br/>
                    <div class="row">
                        <h4>@bottle.BottleName</h4> 
                        <Text>@($"{bottle.CurrentMl} / {bottle.MaxMl}ml ")</Text>
                    </div>
                </div>
            </RadzenCard> 
        }
    </div>
    </div>
    <br/>
    <br/>

    <!-- DRINKS -->
    <div class="row" >
        <Title Type="1">Drinks</Title>
        <Button Shape="@ButtonShape.Round" Type="@AntDesign.ButtonType.Primary" Class="w-50" Style="margin-left: 1rem;" @onclick="CreateDrink"><span class="oi oi-plus"/> @Loc["CreateDrink"]</Button>
    </div>
    <hr/>
    <div class="row" >
            <!-- Favourite Drinks -->
            <Title Type="3">@Loc["FavouriteDrinks"]</Title>
            <div class="card-container">
            @foreach (var drink in _drinks.Where(b => b.IsFavourite == true)) 
            {
                    <RadzenCard class="center" Style="width: 100%; margin: 2%">
                    <div class="d-flex flex-row">
                        <div class="image"><RadzenImage Path="@drink.ImgPath" Class="rounded-circle" Style="width:150px; height: 150px; object-fit:cover;" /></div>
                        <div class="ml-3 w-100">
                            <Button style="position:absolute; top:0; right:0; margin-right: 3%; margin-top: 3%" Type="@AntDesign.ButtonType.Primary" Danger Shape="@ButtonShape.Circle" @onclick="(() => ToggleFavDrink(drink))"><RadzenIcon Icon="favorite" Style="margin-top: 1px;"/></Button>
                            <h2 style="font-weight: bold;">@drink.DrinkName</h2>
                            <div class="p-2 mt-2 bg-primary justify-content-between rounded text-white stats">
                                @foreach(var mix in drink.Mixes)
                                {
                                    <div> 
                                        <a class="@(mix.Bottle.BottleSlotId == null ? "redFont" : "")">@mix.Bottle.BottleName</a>
                                        <a class="number1 @(mix.Milliliters > mix.Bottle.CurrentMl ? "redFont" : "")" style="float: right;">@mix.Milliliters @(" ml")</a> 
                                    </div>
                                }
                            </div>
                        </div>
                        </div>
                        <hr/>
                        <div class="d-flex flex-row" style="width: 100%;">
                                <div class="d-flex flex-column" style="width: 25%">
                                    <Button @onclick="(() => ShowDeleteDrinkConfirmation(drink))" Type="@AntDesign.ButtonType.Primary" Style="" Ghost Danger Shape="@AntDesign.ButtonShape.Round"><RadzenIcon Icon="delete_forever" Style="margin-top: 1px;"/></Button>
                                </div>
                                <div class="d-flex flex-column left-right-margin" style="width: 25%">
                                    <Button @onclick="(() => EditDrink(drink))" Type="@AntDesign.ButtonType.Primary" Style="" Shape="@AntDesign.ButtonShape.Round">
                                        <span class="oi oi-pencil"></span> 
                                    </Button>
                                </div>
                                <div class="d-flex flex-column" style="width: 50%;">
                                    <Button @onclick="(() => MakeDrink(drink))" Type="@AntDesign.ButtonType.Primary" Style="" Shape="@AntDesign.ButtonShape.Round">
                                        @Loc["MakeDrink"]
                                    </Button>
                                </div>
                        </div>
                </RadzenCard>
            }
            </div>
    </div>

    <br/>
    <hr />
    <br/>

    <!-- Other Drinks -->
   <div class="row" >
            <Title Type="3">@Loc["OtherDrinks"]</Title>
            <div class="card-container">
            @foreach (var drink in _drinks.Where(b => b.IsFavourite != true )) 
            {
                    <RadzenCard class="center" Style="width: 100%; margin: 2%">
                    <div class="d-flex flex-row">
                        <div class="image"><RadzenImage Path="@drink.ImgPath" Class="rounded-circle" Style="width:150px; height: 150px; object-fit:cover;" /></div>
                        <div class="ml-3 w-100">
                            <Button style="position:absolute; top:0; right:0; margin-right: 3%; margin-top: 3%" Type="@AntDesign.ButtonType.Primary" Danger Shape="@ButtonShape.Circle" @onclick="(() => ToggleFavDrink(drink))"><RadzenIcon Icon="favorite_border" Style="margin-top: 1px;"/></Button>
                            <h2 style="font-weight: bold;">@drink.DrinkName</h2>
                            <div class="p-2 mt-2 bg-primary justify-content-between rounded text-white stats">
                                @foreach(var mix in drink.Mixes)
                                {
                                    <div class=""> 
                                        <a>@mix.Bottle.BottleName</a>
                                        <a class="number1" style="float: right;">@mix.Milliliters @(" ml")</a> 
                                    </div>
                                }
                            </div>
                        </div>
                        </div>
                        <hr/>
                        <div class="d-flex flex-row" style="width: 100%; ">
                                <div class="d-flex flex-column" style="width: 25%">
                                    <Button @onclick="(() => ShowDeleteDrinkConfirmation(drink))" Type="@AntDesign.ButtonType.Primary" Style="" Ghost Danger Shape="@AntDesign.ButtonShape.Round"><RadzenIcon Icon="delete_forever" Style="margin-top: 1px;"/></Button>
                                </div>
                                <div class="d-flex flex-column left-right-margin" style="width: 25%">
                                    <Button @onclick="(() => EditDrink(drink))" Type="@AntDesign.ButtonType.Primary" Style="" Shape="@AntDesign.ButtonShape.Round">
                                        <span class="oi oi-pencil"></span> 
                                    </Button>
                                </div>
                                <div class="d-flex flex-column" style="width: 50%;">
                                    <Button @onclick="(() => MakeDrink(drink))" Type="@AntDesign.ButtonType.Primary" Style="" Shape="@AntDesign.ButtonShape.Round">
                                        @Loc["MakeDrink"]
                                    </Button>
                                </div>
                        </div>
                </RadzenCard>
            }
        </div>
    </div>

    <!-- Drink modals -->
    @if (_showCreateDrinkModal && _drinkInModal is not null)
    {
        <DrinkModal ModalTitle="@Loc["CreateDrinkTitle"]" _drink=@_drinkInModal OnValidSubmit="ValidSubmitCreateDrink"/>
    }
    @if (_showEditDrinkModal && _drinkInModal is not null)
    {
        <DrinkModal ModalTitle="@Loc["EditDrinkTitle"]" _drink=@_drinkInModal OnValidSubmit="ValidSubmitEditDrink"/>
    }

    <!-- Delete Confirmation Modal-->
    @if (_showDrinkDeleteConfirmationModal)
    {
        <DeleteConfirmationModal ConfirmationMessage=@_deleteConfirmationMessage ConfirmationTitle=@_deleteConfirmationHeader OnConfirmationChange=ValidSubmitDeleteConfirmation/>
    }

    <!-- Slot Bottle changer Modal -->
    @if (_showChangeBottleModal)
    {
        <ChangeBottleModal BottleSlotId=@_selectedSlotId _allBottles=@_allBottles _bottle=@_chosenBottle OnValidSubmit=ValidSubmitSlotChange/>
    }
</div>


@code{
    // Global Site Data
    private List<Drink> _drinks = new();
    private List<Bottle> _allBottles = new();

    // Make drink timeout
    private static DateTime LastDrink = DateTime.Now.AddSeconds(-100);

    // Drink Modals
    private Drink _drinkInModal { get; set; }
    private bool _showEditDrinkModal { get; set; }
    private bool _showCreateDrinkModal { get; set; }

    // Deletion confirmation Modal
    private bool _showDrinkDeleteConfirmationModal { get; set; } = false;
    private string _deleteConfirmationHeader { get; set; }
    private string _deleteConfirmationMessage { get; set; }
    private Drink _drinkToDelete { get; set; }

    // Change Slot Modal
    private bool _showChangeBottleModal { get; set; }
    private int _selectedSlotId { get; set; }
    private Bottle _chosenBottle = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadActiveBottles();
        await LoadAllDrinks();
    }


    /// --------------------------------------------
    /// INITIALIZING (Loading, Refreshing)
    /// --------------------------------------------

    private async Task LoadAllDrinks()
    {
        // load drinks from repo
        _drinks = await _uow.DrinkRepo.GetDrinks();
    }

    private async Task LoadActiveBottles()
    {
        _allBottles = (await _uow.BottleRepo.GetBottles())
                                .OrderBy(b => b.BottleSlotId).ToList();
    }

    private async Task RefreshData()
    {
        await LoadActiveBottles();
        await LoadAllDrinks();
    }    

    /// --------------------------------------------
    /// CRUD ACTIONS (Create, Remove, Update, etc.)
    /// --------------------------------------------

    private async Task ChangeBottleInSlot(Bottle bottle)
    {
        // Executes if DB has changed
        if(bottle.BottleSlotId is null)
        {
            ShowInfo("Database has changed since last retrieval. Bottles have been refreshed!");
            return;
        }

        _chosenBottle = bottle;
        _selectedSlotId = (int)bottle.BottleSlotId;
        _showChangeBottleModal = true;
    }

    private void EditDrink(Drink drink)
    {
        _drinkInModal = drink;
        _showEditDrinkModal = true;
    }

    private void CreateDrink()
    {
        _drinkInModal = new()
        {
            Mixes = new List<Mix>()
        };
        _showCreateDrinkModal = true;
    }

    private async Task ToggleFavDrink(Drink drink)
    {
        drink.IsFavourite = !drink.IsFavourite;

        await RefreshData();
    }


    private async Task RemoveDrink(Drink drink)
    {
        await _uow.DrinkRepo.RemoveDrink(drink);
        await _uow.SaveChanges();

        await RefreshData();
    }

    private async Task ShowDeleteDrinkConfirmation(Drink drink)
    {
        _drinkToDelete = drink;
        _deleteConfirmationHeader = "Delete Confirmation";
        _deleteConfirmationMessage = $"Are you sure you want to delete {_drinkToDelete.DrinkName}?";
        _showDrinkDeleteConfirmationModal = true;
    }

    private async Task MakeDrink(Drink drink)
    {
        // Validation and error reporting to user
        // checks if all bottles are in machine rn
        if(drink.Mixes.Any(m => m.Bottle.BottleSlotId is null))
        {
            ShowError(Loc["BottleNotInMachineError"]);
            return;
        }

        // checks if all mixes can be made from current ml in bottles
        if(drink.Mixes.Any(m => m.Milliliters > m.Bottle.CurrentMl))
        {
            ShowError(Loc["BottleNotEnoughMlError"]);
            return;
        }

        // check if last drink was more than 7s ago to prevent double mixing
        var x = DateTime.Now;
        if(LastDrink.AddSeconds(7) > DateTime.Now)
        {
            ShowError(Loc["ToLittleTimeBetweenDrinkDispenses"]);
            return;
        }
        LastDrink = DateTime.Now;


        // try catch to catch win10 driver exception when executed under windwos. Should work on raspi
        try
        {
            await _uow.RaspiRepo.MakeDrink(drink);
        }
        catch (Exception e)
        {
            ShowError(e.Message);
        }

        // subtracts ml needed for drink from bottles in machine
        foreach(var mix in drink.Mixes)
        {
            var bottle = mix.Bottle;

            if(mix.Milliliters is null)
            {
                ShowError("ERROR: mix.ml null exception");
                return;
            }

            bottle.CurrentMl -= mix.Milliliters.Value;
            await _uow.BottleRepo.UpdateBottle(bottle);
        }
        await _uow.SaveChanges();
    }

    /// --------------------------------------------
    /// COMPONENT SUBMIT HANDLERS
    /// --------------------------------------------

    private async Task ValidSubmitCreateDrink(Drink drink)
    {
        if(drink is null)
        {
            await CancelSubmit();
            return;
        }

        // Create new Drink
        await _uow.DrinkRepo.AddDrink(drink);
        await _uow.SaveChanges();
        _showCreateDrinkModal = false;
        _drinkInModal = null;

        await RefreshData();
    }

    private async Task ValidSubmitEditDrink(Drink drink)
    {
        if(drink is null)
        {
            await CancelSubmit();
            return;
        }

        // Update existing Drink
        await _uow.DrinkRepo.UpdateDrink(drink);
        await _uow.SaveChanges();
        _showEditDrinkModal = false;
        _drinkInModal = null;

        await RefreshData();
    }

    private async Task ValidSubmitDeleteConfirmation(bool isConfirmed)
    {
        if (isConfirmed)
        {
            await RemoveDrink(_drinkToDelete);
        }

        // Reset to defaults
        _showDrinkDeleteConfirmationModal = false;
        _deleteConfirmationHeader = null;
        _deleteConfirmationMessage = null;
        _drinkToDelete = null;
    }

    private async Task ValidSubmitSlotChange(Bottle bottle)
    {
        if(bottle is null)
        {
            await CancelSubmit();
            return;
        }

        List<Bottle> _bottleChangedSinceLastRequest = (await _uow.BottleRepo.GetBottles()).Where(b => b.BottleSlotId == bottle.BottleSlotId).ToList();
        _bottleChangedSinceLastRequest.Remove(_chosenBottle);

        _chosenBottle.BottleSlotId = null;

        // Update drink
        await _uow.BottleRepo.UpdateBottle(_chosenBottle);
        await _uow.BottleRepo.UpdateBottle(bottle);
        await _uow.SaveChanges();
        _showChangeBottleModal = false;
        _chosenBottle = null;
        _selectedSlotId = 0;

        await RefreshData();
    }

    private async Task CancelSubmit()
    {
        _showCreateDrinkModal = false;
        _drinkInModal = null;

        _showChangeBottleModal = false;
        _chosenBottle = null;
        _selectedSlotId = 0;

        await RefreshData();
    }

    private void ShowError(string Message)
    {
        NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = Message, Duration = 4000 });
    }

    private void ShowInfo(string Message)
    {
        NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Info, Summary = Message, Duration = 4000 });
    }

    private void RedirectToAdminSettings()
    {
        Nav.NavigateTo("/admin");
    }
}