@using LeDrink.DAL.Interfaces
@using LeDrink.DAL.Models
@inject IUnitOfWork _uow


@inject IStringLocalizer<CreateDrinkModal> Loc


<Modal Title="@Loc["EditDrink"]"
       Visible="@_modalVisible"
       OnOk="@OkSubmit"
       OnCancel="@CancelModalSubmit"
        Style="top: 3rem"
        Class="fade">
        <div class="container" style="height: 35rem; width: 95%;">
       <EditForm Model="@_drinkViewModel">
            <div class="row">
                    <div class="row">
                        <div >
                            <Title Level="4">Name</Title>
                            <Input Placeholder="@Loc["EnterName"]" style="width: 100%;" @bind-Value="@_drinkViewModel.DrinkName"  />
                            <br />
                        </div>
                    </div>
                    <div class="row">
                        <div >
                            <br />
                            <Title Level="4">@Loc["ImagePath"]</Title>
                            <Input Placeholder="@Loc["EnterURL"]" style="width: 100%;" @bind-Value="@_drinkViewModel.ImgPath"  />
                            <br />
                        </div>
                    </div>
                    <br/>
                    <div class="row">
                        <div>
                            <br />
                            <Title Level="2" >@Loc["ConfigIngredients"]</Title>
                        </div>
                        <div class="container">

                        <!-- Mix settings -->
                        <AntDesign.Button  @onclick="AddMixToDrink" Type="@AntDesign.ButtonType.Primary" Shape="@ButtonShape.Round">
                            <span class="oi oi-plus"></span> @Loc["AddIngredient"]
                        </AntDesign.Button>
                        @if(_drinkViewModel.TotalMl > 500)
                        {
                            <Alert Message="@Loc["MixAmount"]"  Type="@AlertType.Error" />
                        }

                        <div class="row" >
                        <div class="info-div">
                        <div class="card-container">
                            @foreach(var mix in _drinkViewModel.Mixes)
                            {
                                <div class="row">
                                    <div>
                                        <div>

                                        </div>
                                        <Select DataSource="@_bottles"
                                                @bind-Value="@mix.Bottle"
                                                LabelName="@nameof(_selectedBottle.BottleName)"
                                                Placeholder="@Loc["SelectBottle"]">
                                        </Select>
                                    </div>
                                    <br/>
                                    <div>
                                        <RadzenLabel Text="@Loc["Amount"]" />
                                        <div style="width: 100%">
                                            <RadzenAutoComplete  Placeholder="Enter Ml Amount" Style="width: 80%"/>
                                            <Button @onclick="(() => RemoveMix(mix.Id))" Type="@AntDesign.ButtonType.Primary" Ghost Danger><RadzenIcon Icon="delete_forever" Style="margin-top: 1px;"/></Button>
                                        </div>
                                        <br />
                                    </div>
                                    <br />
                                </div>
                            }
                            </div>
                        </div>
                    </div>
                    </div>
                    </div>
            </div>
        </EditForm>
        </div>
</Modal>


<style>

    .info-div {
  position: absolute;
  width: 85%;
  z-index: 20;
  max-height: 30%;
  overflow-y: scroll;
}

</style>

@code {
    [Parameter] public Drink _drink { get; set; } = new();
    [Parameter] public EventCallback<Drink> OnValidSubmit { get; set; }

    // alert
    private bool _alert = false;

    // Modal Params
    private bool _modalVisible;

    public Drink _drinkViewModel { get; set; } = new();
    private List<Bottle> _bottles { get; set; }
    private Bottle _selectedBottle { get; set; }


    protected override async Task OnInitializedAsync()
    {
        _bottles = await _uow.BottleRepo.GetBottles();
        _drinkViewModel = _drink;
        _modalVisible = true;
    }

    private async Task AddMixToDrink()
    {
        _drinkViewModel.Mixes.Add(new Mix
            {
                drinkId = _drinkViewModel.Id,
                Milliliters = 0,
                bottleId = 1
        });
    }

    private async Task SetSelectedBottle(int bottleId)
    {
        _selectedBottle = await _uow.BottleRepo.GetBottle(bottleId);
    }

    // End Methods
    private async Task OkSubmit()
    {
        _modalVisible = false;
        await OnValidSubmit.InvokeAsync(_drinkViewModel);
    }

    private async Task CancelModalSubmit()
    {
        _modalVisible = false;
        await OnValidSubmit.InvokeAsync(null);
    }

    private async Task RemoveMix(int mixId)
    {
        _drinkViewModel.Mixes.Remove(await _uow.MixRepo.GetMix(mixId));
    }
}

