@using LeDrink.DAL.Interfaces
@using LeDrink.DAL.Models
@using System.Security.Policy
@inject IUnitOfWork _uow
@inject Radzen.NotificationService NotificationService
@inject IStringLocalizer<CreateEditBottleModal> Loc
@inject IFileUpload fileUpload


@* ----- MODAL FOR BOTTLE CRUD ACTIONS ----- *@
<Modal Title="@ModalTitle"
       Visible="@_modalVisible"
       OnOk="@OkSubmit"
       OnCancel="@CancelModalSubmit"
        Style="top: 0rem"
        Class="fade"> 
        <div class="container" style="height: 38rem; width: 95%;">
            <div class="row">

                @* ----- NAME INPUT ----- *@
                <div class="row" style="margin-bottom: 1em;">
                    <div style="margin-bottom: 3%">
                        <h3 class="fw-bold">Name</h3>
                        <div>
                            <Input Placeholder="@Loc["EnterName"]" style="width: 100%;" @bind-Value="@_bottle.BottleName" Class="vertical-center"/>
                        </div>
                    </div>
                </div>

                @* ----- IMAGE PICKER ----- *@
                <div class="row" style="margin-bottom: 10.5em;">

                        @* File upload *@
                        <h3 class="fw-bold">@Loc["IconPicker"]</h3>
                        <BlazorInputFile.InputFile OnChange="HandleFileUpload">
                            Upload a new File
                        </BlazorInputFile.InputFile>

                        @* Image Picker *@
                        <div class="info-div" style="margin-top: 5em;">
                            <div class="d-flex flex-wrap" style="width: 100%">
                                @foreach(var img in _bottleImgFilePaths)
                                {
                                    <div class="d-flex flex-column" style="margin: 0.5em" >
                                        <ContextMenuTrigger MenuId="@img">
                                            <img src="@img" style="height: 7.75em; width: auto; margin: 1%" @onclick=@(() => SetSelectedImage(@img)) class="@(_selectedImg == img && img is not null ? "rcornersGreen" : "")" />
                                        </ContextMenuTrigger>
                                    </div>
                                    <BlazorContextMenu.ContextMenu Id="@img">
                                        <Item OnClick="@(() => RemoveImage(img))">Delete Image</Item>
                                    </BlazorContextMenu.ContextMenu>
                                }
                            </div>
                        </div>
                    <br />
                </div>
            </div>
        </div>
</Modal>


<style>

    @* Scrollable CSS for image picker *@
    .info-div {
  position: absolute;
  width: 85%;
  z-index: 20;
  max-height: 60%;
  overflow-y: scroll;
}

    .vertical-center {
  margin: 0;
  position: absolute;
  top: 50%;
  -ms-transform: translateY(-50%);
  transform: translateY(-50%);
}

</style>

@code {
    [Parameter] public Bottle _bottle { get; set; } = new();
    [Parameter] public string ModalTitle { get; set; }
    [Parameter] public EventCallback<Bottle> OnValidSubmit { get; set; }

    private bool _modalVisible;

    // Image picker variables
    private List<string> _bottleImgFilePaths = new();
    private string _selectedImg;
    IFileListEntry file;

    protected override async Task OnInitializedAsync()
    {
        // If an edit, set current image as default selected
        if(_bottle .ImgPath is not null)
        {
            _selectedImg = _bottle.ImgPath;
        }

        _modalVisible = true;
        await LoadImagesFromWWWRoot();
    }

    private async Task LoadImagesFromWWWRoot()
    {
        // First get the directory on which your all your images reside
        string strDirectory = "wwwroot/images/bottles";

        // Get all files on the directory and store it on string array
        _bottleImgFilePaths = Directory.GetFiles(strDirectory).ToList();

        _bottleImgFilePaths = _bottleImgFilePaths.Select(f => { f = f.Replace("wwwroot", "").Replace("\\", "/"); return f; }).ToList();

        // Put initial image on top
        _bottleImgFilePaths.Remove(_selectedImg);
        _bottleImgFilePaths.Insert(0, _selectedImg);

        // Removes null items because first image is always null
        _bottleImgFilePaths.RemoveAll(item => item == null);
    }

    // set green broder to indicate selected image
    private async Task SetSelectedImage(string imagePath)
    {
        if(_selectedImg == imagePath)
        {
            // Deselect image if clicked again
            _selectedImg = null;
            _bottle.ImgPath = null;
            return;
        }

        _selectedImg = imagePath;
        _bottle.ImgPath = imagePath;
    }

    /// -----------------------
    /// VALIDATION AND CANCELATION HANDLERS
    /// -----------------------

    private async Task OkSubmit()
    {
        if(await ValidateBottleValues())
        {
            // inputs are all valid
            _modalVisible = false;
            await OnValidSubmit.InvokeAsync(_bottle);
        }
    }

    private async Task CancelModalSubmit()
    {
        _modalVisible = false;
        await OnValidSubmit.InvokeAsync(null);
    }

    // Checks if all values set are valid
    private async Task<bool> ValidateBottleValues()
    {
        if(String.IsNullOrEmpty(_bottle.BottleName))
        {
            ShowError(Loc["DrinkNameEmptyError"]);
            return false;
        }

        if(_bottle.BottleName.Count() > 8)
        {
            ShowError(Loc["NameToLargeError"]);
            return false;
        }

        if(_bottle.ImgPath is null)
        {
            ShowError(Loc["ImgPathEmpty"]);
            return false;
        }

        return true;
    }

    private void ShowError(string Message)
    {
        NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = Message, Duration = 4000 });
    }


    /// -----------------------
    /// FILE UPLOAD AND DELETION HANDLERS
    /// -----------------------

    private async Task HandleFileUpload(IFileListEntry[] files)
    {
        file = files.FirstOrDefault();

        // Check if file is specified filetype
        List<string> ImageExtensions = new List<string> { ".JPG", ".JPE", ".BMP", ".GIF", ".PNG", ".SVG" };
        if(!ImageExtensions.Contains(Path.GetExtension(file.Name).ToUpperInvariant()))
        {
            ShowError("File is of invalid Type. Must be .jpg, .jpe, .bmp, .gif, .png or .svg!");
            return;
        }

        // Check if file size is less than 10mb
        if(file.Size > 10 * 1024 * 1024)
        {
            ShowError("Filesize is too big! Max size is 10MB");
            return;
        }

        if(file is not null)
        {
            await fileUpload.Upload(file);
        }

        await LoadImagesFromWWWRoot();
    }

    private async Task RemoveImage(string img)
    {
        if(img == "/images/bottles/default.png")
        {
            ShowError(Loc["CantDeleteDefaultImg"]);
            return;
        }

        var imgPath = @"wwwroot" + img;

        if (File.Exists(imgPath))
        {
            File.Delete(imgPath);
            await LoadImagesFromWWWRoot();
        }
    }
}

