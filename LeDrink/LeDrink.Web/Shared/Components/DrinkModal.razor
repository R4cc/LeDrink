@using LeDrink.DAL.Interfaces
@using LeDrink.DAL.Models
@using System.Security.Policy
@inject IUnitOfWork _uow
@inject Radzen.NotificationService NotificationService
@inject IStringLocalizer<DrinkModal> Loc

<Modal Title="@ModalTitle"
       Visible="@_modalVisible"
       OnOk="@OkSubmit"
       OnCancel="@CancelModalSubmit"
        Style="top: 0rem"
        Class="fade"> 
        <div class="container" style="height: 32rem; width: 95%;">
            <div class="row">
                    <div class="row" style="margin-bottom: 1em;">
                        <div>
                            <h3 class="fw-bold">Name</h3>
                            <div style="position: relative;">
                                <Input Placeholder="@Loc["EnterName"]" style="width: 90%; " @bind-Value="@_drink.DrinkName" Class="vertical-center"/>
                                <Button Type="@AntDesign.ButtonType.Primary" Style=" margin-left: 2%;" Danger Shape="@ButtonShape.Circle" @onclick="(() => _drink.IsFavourite = !_drink.IsFavourite)" Class="vertical-center">
                                    <RadzenIcon Icon="@(_drink.IsFavourite ? "favorite" : "favorite_outline")"/>
                                </Button>
                            </div>
                        </div>
                    </div>
                    <div class="row" style="margin-bottom: 10.5em;">
                            <h3 class="fw-bold">@Loc["IconPicker"]</h3>
                            <div class="info-div" style="max-height: 19%; margin-top: 1.95em;">
                                    <div class="d-flex flex-wrap" style="width: 100%">
                                        @foreach(var img in strFiles)
                                        {
                                            <div class="d-flex flex-column">
                                                <img src="@img" style="height: 6.5em; width: auto; margin: 1%" @onclick=@(() => SetSelectedImage(@img)) class="@(_selectedImg == img && img is not null ? "rcornersGreen" : "")"/>
                                            </div>
                                        }
                                    </div>
                            </div>
                        <br />
                    </div>
                    <hr/>
                    <div class="row" style="width: 100%">
                        <div class="container" style="width: 100%">
                       <div style="margin-bottom: 5px">
                            <h3  class="fw-bold" style="margin-bottom: -2px">@Loc["DrinkIngredients"]</h3> 
                            <span style="@(_drink.TotalMl > 450 ? "color: red;" : "")">@(_drink.TotalMl)</span> 
                            <span>/ 450ml</span>
                       </div>

                        <!-- Mix settings -->
                        <AntDesign.Button  @onclick="AddMixToDrink" Type="@AntDesign.ButtonType.Primary" Shape="@ButtonShape.Round" Disabled="@(_drink.Mixes.Count >= 4)">
                            <span class="oi oi-plus"></span> @Loc["AddIngredient"]
                        </AntDesign.Button>
                        <div class="row" style="margin-top: 5%">
                        <div class="info-div" style="margin-left: 2%; max-height: 23%;">
                        <div class="card-container" style="width: 99%; ">

                            @foreach(var mix in _drink.Mixes)
                            {
                                <div class="row" style="max-width: 110%">
                                    <div style="margin-bottom: 2%; width: 100%;">
                                        <RadzenLabel Text="Bottle" />
                                    <select class="form-select" aria-label="Default select example" @bind="@mix.Bottle.Id">
                                        @foreach(var bottle in _bottles)
                                        {
                                            <option value="@bottle.Id">@bottle.BottleName</option>
                                        }
                                    </select>
                                    </div>
                                    <div>
                                        <RadzenLabel Text="@Loc["Amount"]" />
                                        <div>
                                            <Input Type="number" @bind-Value="@mix.Milliliters" Placeholder="Enter Ml Amount" Style="width: 80%" OnBlur=ValidateMlConditions />
                                            <Button @onclick="(() => RemoveMix(mix.Id))" Type="@AntDesign.ButtonType.Primary" Style="width: 18%;" Ghost Danger><span class="oi oi-x"></span></Button>
                                        </div>
                                        <hr/>
                                    </div>
                                </div>
                            }
                            </div>
                        </div>
                    </div>
                    </div>
                </div>
            </div>

        </div>
</Modal>

<style>

    .info-div {
  position: absolute;
  width: 85%;
  z-index: 20;
  max-height: 32%;
  overflow-y: scroll;
}

.vertical-center {
  margin: 0;
  position: absolute;
  top: 50%;
  -ms-transform: translateY(-50%);
  transform: translateY(-50%);
}

</style>

@code {
    [Parameter] public Drink _drink { get; set; } = new();
    [Parameter] public string ModalTitle { get; set; }
    [Parameter] public EventCallback<Drink> OnValidSubmit { get; set; }

    // Modal Params
    private bool _modalVisible;

    private List<Bottle> _bottles { get; set; }
    private Bottle _selectedBottle { get; set; }

    /// <summary>
    /// Image picker for drink
    /// </summary>
    private List<string> strFiles = new();
    private string _selectedImg;

    protected override async Task OnInitializedAsync()
    {
        if(_drink.ImgPath is not null)
        {
            _selectedImg = _drink.ImgPath;
        }

        _modalVisible = true;
        await LoadImagesFromWWWRoot();
        await LoadBottlesToSelectFrom();
    }

    private async Task LoadBottlesToSelectFrom()
    {
        _bottles = await _uow.BottleRepo.GetBottles();
    }

    private async Task LoadImagesFromWWWRoot()
    {
        //First get the directory on which your all your images reside
        string strDirectory = "wwwroot/images/drinks";

        //Get all files on the directory and store it on string array
        strFiles = Directory.GetFiles(strDirectory).ToList();

        strFiles = strFiles.Select(f => { f = f.Replace("wwwroot", "").Replace("\\", "/"); return f; }).ToList();

        //Put initial image on top
        strFiles.Remove(_selectedImg);
        strFiles.Insert(0, _selectedImg);
    }

    private async Task SetSelectedImage(string imagePath)
    {
        _selectedImg = imagePath;
        _drink.ImgPath = imagePath;
    }

    private async Task AddMixToDrink()
    {
        await LoadBottlesToSelectFrom();

        _drink.Mixes.Insert(0, new Mix
            {
                drinkId = _drink.Id,
                Milliliters = null,
                bottleId = null
        });
    }

    private async Task SetSelectedBottle(int bottleId)
    {
        _selectedBottle = await _uow.BottleRepo.GetBottle(bottleId);
    }

    // Validation, Cancelation Methods
    private async Task OkSubmit()
    {
        if(await ValidateMlConditions())
        {
            // inputs are all valid
            _modalVisible = false;
            await OnValidSubmit.InvokeAsync(_drink);
        }
    }

    private async Task CancelModalSubmit()
    {
        _modalVisible = false;
        _bottles = null;
        _selectedBottle = null;
        await OnValidSubmit.InvokeAsync(null);
    }

    private async Task RemoveMix(int mixId)
    {
        _drink.Mixes.Remove(await _uow.MixRepo.GetMix(mixId));
    }

    /// <summary>
    /// Validate if the drink that is being edited is valid
    /// </summary>
    /// <returns>If Drink values are valid</returns>
    private async Task<bool> ValidateMlConditions()
    {
        if(_drink.TotalMl > 450)
        {
            ShowError(Loc["OverMaxError"]);
            return false;
        }

        if (_drink.Mixes.Any(m => m.Milliliters <= 0))
        {
            ShowError(Loc["DrinkVolume0Error"]);
            return false;
        }

        if(String.IsNullOrEmpty(_drink.DrinkName))
        {
            ShowError(Loc["DrinkNameEmptyError"]);
            return false;
        }

        if((_drink.Mixes.Select(m => m.Bottle).Count() != (_drink.Mixes.Select(m => m.Bottle).Distinct().Count())))
        {
            ShowError(Loc["DuplicateBottlesError"]);
            return false;
        }

        return true;
    }

    private void ShowError(string Message)
    {
        NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = Message, Duration = 4000 });
    }

    private double GetPercentageOf(int num1, int num2)
    {
        return (double)((_drink.TotalMl / 450) * 100);
    }
}

