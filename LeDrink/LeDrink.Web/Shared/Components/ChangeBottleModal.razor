@inject IUnitOfWork _uow
@inject IStringLocalizer<ChangeBottleModal> Loc
@inject Radzen.NotificationService NotificationService

    
@* ----- CUSTOM FOOTER FOR MODAL BUTTONS ----- *@
@{
    RenderFragment footer = @<Template>
        <Button OnClick="@DecreaseSelectedIndex" Type=@AntDesign.ButtonType.Link Disabled=@(_stepsSelectedIndex <= 0)>@Loc["Previous"]</Button>
        <Button OnClick="@IncreaseSelectedIndex" Type=@AntDesign.ButtonType.Primary Disabled=@(!_bottleSelected)>
            @(_stepsSelectedIndex >= 2 ? Loc["Confirm"] : Loc["Next"])
        </Button>
    </Template>;
}

@* ----- MODAL FOR CHANGING A BOTTLE IN A SPECIFIED SLOT(1-4) ----- *@
<Modal Title="@(Loc["ChangeBottleSlot"] + " " + BottleSlotId)"
       Visible="@_visible"
       OnOk="@HandleOk"
       OnCancel="@HandleCancel"
       ConfirmLoading="@_confirmLoading"
       Style="top: 0rem"
       Footer=@footer
       Class="fade">
    <div class="container" style="height: 35rem; width: 95%;">

        
        @* ----- 1. CONFIGURATION STEP: BOTTLE SELECT ----- *@
        @if (_stepsSelectedIndex == 0)
        {
            <Title Level="4">@Loc["Selection"]</Title>
            <div class="row" style="margin-bottom: 1rem;">
                <h4>@Loc["SelectBottle"]</h4>
            </div>
            <div class="row" style="margin-bottom: 1.5rem; ">
                <Button @onclick="CreateBottle" Type="@AntDesign.ButtonType.Primary" Shape="@AntDesign.ButtonShape.Round" Class="w-100">
                    @Loc["CreateBottle"]
                </Button>
            </div>
            <div class="row">
                <div class="info-div">
                    <div class="card-container">
                        @foreach (var bottle in _allBottles)
                        {
                            @* Make sure bottle is not in machine right now (do not display) *@
                            @if (bottle.BottleSlotId is null)
                            {
                                <RadzenCard class="@(bottle.Id == _bottle.Id ? "text-white border-success" : "")"
                                style="width: 46%; margin: 2%; cursor: pointer;"
                                @onclick="(()=>ChooseBottle(bottle))">
                                <ContextMenuTrigger MenuId="@(bottle.Id.ToString())">
                                    <div class="container" style="text-align: center;">
                                        <div class="row">
                                            <RadzenImage Path="@bottle.ImgPath" Style="object-fit:cover;" />
                                            <br />
                                        </div>
                                        <div class="row">
                                            <div class="col-12">
                                                <h4>@bottle.BottleName</h4>
                                            </div>
                                        </div>
                                    </div>

                                    @* Right-click menu for card *@
                                    <BlazorContextMenu.ContextMenu Id="@(bottle.Id.ToString())" >
                                        <Item OnClick="@(() => EditBottle(bottle))" >Edit Bottle</Item>
                                        <Item OnClick="@(() => RemoveBottle(bottle))" >Delete Bottle</Item>
                                    </BlazorContextMenu.ContextMenu>
                                </ContextMenuTrigger>
                                </RadzenCard>

                            }
                        }
                    </div>
                </div>
            </div>
            <br />
        }


        @* ----- 2. CONFIGURATION STEP: SIZE CONFIGURATION (MAX AND CURRENT FILL LVL)----- *@
        @if (_stepsSelectedIndex == 1)
        {
            <Title Level="2">@Loc["SizeConfig"]</Title>
            <div class="row">
                <div class="col">
                    <h4>@Loc["BottleSize"]</h4>
                    <AutoComplete @bind-Value="@_bottleMaxCapacityMl" Options="@_templateBottleSize" Placeholder="@Loc["EnterML"]" />
                </div>
            </div>
            <br />

            <div class="row">
                <div>
                    <h4>@Loc["BottleFullness"] @(_bottleCurrentFillPercentage)%</h4>
                    <Slider TValue="double" Step=10 @bind-Value=@_bottleCurrentFillPercentage Min=0 Max=100 Disabled=@(_bottleMaxCapacityMl is null) />
                </div>
            </div>
            <br />
            <br />
        }
                
        
        @* ----- 3. CONFIGURATION STEP: CONFIRMATION ----- *@
        @if (_stepsSelectedIndex == 2)
        {
            <div class="container" style="text-align: center;">
                <h1>@Loc["Confirmation"]</h1>
                <br />
                <div class="row">
                    <RadzenImage Path="@_bottle.ImgPath" Style="max-height: 350px; width: auto; display: block; margin-left: auto; margin-right: auto;" />
                </div>
                <br />
                <div class="row">
                    <h1>@_bottle.BottleName</h1>
                </div>
                <div class="row">
                    <h2>@($"{_bottle.CurrentMl}" + "/" + $"{_bottle.MaxMl}" + "ml")</h2>
                </div>
            </div>
            <br />
            <br />
        }
    </div>
</Modal>

<!-- Bottle modals -->
@if (_showCreateBottleModal && _bottleInModal is not null)
{
    <CreateEditBottleModal ModalTitle="@Loc["CreateBottle"]" _bottle=@_bottleInModal OnValidSubmit=@ValidSubmitCreateBottle/>
}
@if (_showEditBottleModal && _bottleInModal is not null)
{
    <CreateEditBottleModal ModalTitle="@Loc["EditBottle"]" _bottle=@_bottleInModal OnValidSubmit=@ValidSubmitEditBottle/>
}

<style>

    .info-div {
    position: absolute;
    width: 90%;
    z-index: 20;
    max-height: 60%;
    overflow-y: scroll;
}

</style>

@code {
    [Parameter] public int BottleSlotId { get; set; }
    [Parameter] public Bottle _bottle { get; set; }
    [Parameter] public List<Bottle> _allBottles { get; set; }
    [Parameter] public EventCallback<Bottle> OnValidSubmit { get; set; }


    bool _visible = false;
    bool _confirmLoading = false;

    // Modal options to set
    private List<string> _templateBottleSize = new() { "250", "330", "500", "700", "750", "1000", "1500" };
    private string _bottleMaxCapacityMl = null;
    private double _bottleCurrentFillPercentage = 100d;
    private bool _bottleSelected = false;
    private int _stepsSelectedIndex = 0;

    // Footer button options
    private bool PrevBtnDisabled = true;
    private bool NextBtnIsConfirmBtn = false;


    // Bottle (Edit, Create) Modals
    private Bottle _bottleInModal { get; set; }
    private bool _showEditBottleModal { get; set; }
    private bool _showCreateBottleModal { get; set; }


    protected override async Task OnInitializedAsync()
    {
        ShowModal();
    }

    private void ShowModal()
    {
        _visible = true;
    }

    private async Task RefreshData()
    {
        _allBottles = (await _uow.BottleRepo.GetBottles()).Where( b => b.BottleSlotId is null).ToList();
    }

    // Sets active bottle 
    private async Task ChooseBottle(Bottle bottle)
    {
        _bottle = bottle;
        _bottleSelected = true;
    }

    private async Task RefreshSelectedBottle()
    {

        // Invalid bottle fill level inputs (under 10ml)
        if(Convert.ToInt32(_bottleMaxCapacityMl) < 10)
        {
            ShowError(Loc["InvalidBottleMlInputs"]);
            return;
        }

        _bottle.MaxMl = Convert.ToInt32(_bottleMaxCapacityMl);

        // Set Current ML amounts (depending on % full slider)
        if (_stepsSelectedIndex != 2)
        {
            // Step not needed on this modal page
            return;
        }

        await ValidateMlParams();

        if (_bottleCurrentFillPercentage != 100)
        {
            // Calculates the CurrentMl with the percentage full
            double CurrentMl = (_bottle.MaxMl * (int)_bottleCurrentFillPercentage / 100);
            _bottle.CurrentMl = (int)CurrentMl;
            return;
        }

        _bottle.CurrentMl = _bottle.MaxMl;
    }

    private async Task ValidateMlParams()
    {
        // Invalid bottle fill level inputs (under 10ml)
        if(_bottle.MaxMl < 10 || (_bottle.MaxMl * (int)_bottleCurrentFillPercentage / 100) < 10)
        {
            ShowError(Loc["InvalidBottleMlInputs"]);
            return;
        }
    }


    private async Task UpdateBottleSlotId()
    {
        _bottle.BottleSlotId = BottleSlotId;
    }


    /// -----------------------
    /// MODAL CURRENT ACTIVE STEP 
    /// -----------------------

    private async Task IncreaseSelectedIndex()
    {
        if (_stepsSelectedIndex == 2)
        {
            await HandleOk();
            return;
        }
        _stepsSelectedIndex++;
        await RefreshSelectedBottle();
    }

    private async Task DecreaseSelectedIndex()
    {
        if (_stepsSelectedIndex == 0)
        {
            return;
        }
        _stepsSelectedIndex--;
        await RefreshSelectedBottle();
    }


    /// -----------------------
    /// BOTTLE CRUD ACTIONS
    /// -----------------------
    
    private async Task EditBottle(Bottle bottle)
    {
        _bottleInModal = bottle;
        _showEditBottleModal = true;
        
        await RefreshData();
    }

    private async Task CreateBottle()
    {
        _bottleInModal = new();
        _showCreateBottleModal = true;
        
        await RefreshData();
    }

    private async Task RemoveBottle(Bottle bottle)
    {
        await _uow.BottleRepo.RemoveBottle(bottle);
        await _uow.SaveChanges();

        await RefreshData();
    }


    /// -----------------------
    /// VALIDATION AND CANCELATION HANDLERS
    /// -----------------------

    private async Task HandleOk()
    {
        _confirmLoading = true;
        StateHasChanged();
        _visible = false;
        _bottleSelected = false;
        _stepsSelectedIndex = 0;

        await RefreshSelectedBottle();
        await UpdateBottleSlotId();
        await OnValidSubmit.InvokeAsync(_bottle);
        _confirmLoading = false;
    }

    private async Task HandleCancel(MouseEventArgs e)
    {
        _confirmLoading = true;
        _visible = false;
        StateHasChanged();
        _bottle = null;
        _bottleSelected = false;
        _stepsSelectedIndex = 0;
        await OnValidSubmit.InvokeAsync(null);
        _confirmLoading = false;
    }

    private async Task ValidSubmitCreateBottle(Bottle bottle)
    {
        if(bottle is null)
        {
            await CancelSubmit();
            return;
        }

        // Create new bottle
        await _uow.BottleRepo.AddBottle(bottle);
        await _uow.SaveChanges();
        _showCreateBottleModal = false;
        _bottleInModal = null;

        await RefreshData();
    }

    // Callbacks from create new / edit bottle modal
    private async Task ValidSubmitEditBottle(Bottle bottle)
    {
        if(bottle is null)
        {
            await CancelSubmit();
            return;
        }

        // Update existing Drink
        await _uow.BottleRepo.UpdateBottle(bottle);
        await _uow.SaveChanges();
        _showEditBottleModal = false;
        _bottleInModal = null;

        await RefreshData();
    }

    private async Task CancelSubmit()
    {
        _showCreateBottleModal = false;
        _showEditBottleModal = false;
        _bottleInModal = null;
    }

    private void ShowError(string Message)
    {
        NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = Message, Duration = 4000 });
    }
}
