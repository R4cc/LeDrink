@using LeDrink.DAL.Models

<Modal Title="@("Change bottle corresponding to SLOT " + BottleSlotId)"
       Visible="@_visible"
        OnOk="@HandleOk"
       OnCancel="@HandleCancel"
       ConfirmLoading="@_confirmLoading"
       OkButtonProps="new AntDesign.ButtonProps(){ Disabled = !_modalOkButtonEnabled }"
       Style="top: 30px">
        <div class="container">
            <RadzenSteps Change=RefreshModalButtons SelectedIndex="@_stepsSelectedIndex" >
            <Steps>
            <RadzenStepsItem Text="Bottle Selection" >            
                 <div class="row" >
                    <Title Type="3">All Bottles</Title>
                    @foreach (var bottle in _allBottles)
                    {
                        @if(bottle.BottleSlotId is null)
                        {
                            <div class="col-sm" style="margin-bottom: 5%">
                            <RadzenCard class="@(bottle.Id == _selectedBottle.Id ? "text-white border-success" : "")" 
                                style="width: 100%; height: 100%; cursor: pointer;" 
                                @onclick="(()=>ChooseBottle(bottle))">

                                <div class="container" style="text-align: center;">
                                        <br/>
                                    <div class="row">
                                        <RadzenImage Path="@bottle.ImgPath" Style="object-fit:cover;" />
                                    </div>
                                        <br/>
                                    <div class="row">
                                            <h4>@bottle.BottleName</h4> 
                                    </div>
                                </div>
                            </RadzenCard>
                        </div>  
                        }
                    }
                </div>
            <br/>
            <br/>
            </RadzenStepsItem>
            <RadzenStepsItem Text="Size Configuration" Disabled="@(!_bottleSelected)">            
                <div class="row">
                <div class="col">
                    <Title Level="4">Bottle capacity (ml)</Title>
                    <AutoComplete @bind-Value="@_bottleMaxCapacityMl" Options="@_templateBottleSize"  Placeholder="Enter Ml Amount"/>
                </div>
            </div>
            <br />
            <div class="row">
                <div class="col">
                    <div>
                        <Title Level="4">Current level</Title>
                        <RadioGroup @bind-Value="@_bottleIsFull" >
                            <Radio Value="true">Full bottle</Radio>
                            <Radio Value="false">Partially Full Bottle</Radio>
                        </RadioGroup>
                    @if(!_bottleIsFull)
                    {
                        <br/>
                        <p>Fill Level (@(_bottleCurrentMlAmount) %)</p>
                        <div>
                            <RadzenSlider @bind-Value=@_bottleCurrentMlAmount TValue="int" Min="1" Max="100" Disabled=_bottleIsFull Class="w-100"/>
                        </div>
                    }
                    </div>
                </div>
            </div>
            <br/>
            <br/>
            </RadzenStepsItem>
            <RadzenStepsItem Text="Confirmation" Disabled="@(!_bottleSelected || _bottleMaxCapacityMl is null)" >
                <div class="container" style="text-align: center;">
                    <div class="row">
                        <RadzenImage Path="@_selectedBottle.ImgPath" style="height: 50%;"/>
                    </div>
                        <br/>
                    <div class="row">
                        <h2>@_selectedBottle.BottleName</h2> 
                    </div>
                    <div class="row">
                        <h4>@($"{_selectedBottle.MaxMl}" + "/" + $"{_selectedBottle.CurrentMl}" + "ml")</h4> 
                    </div>
                </div>
            <br/>
            <br/>
            </RadzenStepsItem>
            </Steps>
            </RadzenSteps>
    </div>
</Modal>

@code{
    [Parameter] public int BottleSlotId { get; set; }
    [Parameter] public Bottle _selectedBottle { get; set; }
    [Parameter] public List<Bottle> _allBottles { get; set; }
    [Parameter] public EventCallback<Bottle> OnValidSubmit { get; set; }
    //[Parameter] public EventCallback CancelSubmit { get; set; }

    bool _visible = false;
    bool _confirmLoading = false;

    // Modal options to set
    private bool _bottleIsFull = true;
    private List<string> _templateBottleSize = new() {"250", "330", "500", "700", "750", "1000", "1500"};
    private string _bottleMaxCapacityMl;
    private int _bottleCurrentMlAmount = 50;
    private bool _bottleSelected = false;

    private bool _modalOkButtonEnabled = false;
    private int _stepsSelectedIndex = 0;

    protected override async Task OnInitializedAsync()
    {
        ShowModal();
    }

    private void ShowModal()
    {
        _visible = true;
    }

    // Executes on Bottle click
    private async Task ChooseBottle(Bottle bottle)
    {
        _stepsSelectedIndex++;
        _selectedBottle = bottle;
        _bottleSelected = true;
    }

    private async Task HandleOk(MouseEventArgs e)
    {
        await RefreshSelectedBottle();

        await OnValidSubmit.InvokeAsync(_selectedBottle);

        _confirmLoading = true;
        StateHasChanged();
        _visible = false;
        _confirmLoading = false;
        _bottleSelected = false;
    }

    private async Task HandleCancel(MouseEventArgs e)
    {
        await OnValidSubmit.InvokeAsync(null);
        _visible = false;
        _confirmLoading = false;
        StateHasChanged();
        _selectedBottle = null;
        _bottleSelected = false;
    }
    private async Task RefreshModalButtons()
    {
        if(_bottleSelected && _bottleMaxCapacityMl is not null)
        {        
            _modalOkButtonEnabled = true;
        }
        else
        {
            _modalOkButtonEnabled = false;
        }
    }

    private async Task RefreshSelectedBottle()
    {
        _selectedBottle.BottleSlotId = BottleSlotId;
        _selectedBottle.MaxMl = Convert.ToInt32(_bottleMaxCapacityMl);

        if (!_bottleIsFull)
        {
            _selectedBottle.CurrentMl = (int)_bottleCurrentMlAmount;
        }
        else
        {
            _selectedBottle.CurrentMl = _selectedBottle.MaxMl;
        }
    }
}
