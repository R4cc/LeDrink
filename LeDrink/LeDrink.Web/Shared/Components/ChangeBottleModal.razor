@using LeDrink.DAL.Models

@{
    RenderFragment footer = @<Template>
    <Button OnClick="@DecreaseSelectedIndex" Type=@AntDesign.ButtonType.Link Disabled=@(_stepsSelectedIndex <= 0)>Previous</Button>
    <Button OnClick="@IncreaseSelectedIndex" Type=@AntDesign.ButtonType.Primary Disabled=@(!_bottleSelected)>
        @(_stepsSelectedIndex >= 2 ? "Confirm" : "Next")
    </Button>
</Template>;
}

<Modal Title="@("Change bottle corresponding to SLOT " + BottleSlotId)"
       Visible="@_visible"
        OnOk="@HandleOk"
       OnCancel="@HandleCancel"
       ConfirmLoading="@_confirmLoading"
        Style="top: 3rem"
        Footer=@footer>
        <div class="container" style="height: 35rem; width: 95%;">
            @if(_stepsSelectedIndex == 0){
                <Title Level="4">Bottle Selection</Title>
                 <div class="row" style="margin-bottom: 1rem;">
                    <h4>Select your new Bottle!</h4>
                 </div>
                 <div class="row" style="margin-bottom: 1.5rem; ">
                    <Button @onclick="CreateBottle" Type="@AntDesign.ButtonType.Primary" Shape="@AntDesign.ButtonShape.Round" Class="w-100">
                        + Create new Bottle
                    </Button>
                </div>
                 <div class="row" >
                    <div class="info-div">
                    <div class="card-container">
                        @foreach (var bottle in _allBottles)
                        {
                            @if(bottle.BottleSlotId is null)
                            {
                                <RadzenCard class="@(bottle.Id == _selectedBottle.Id ? "text-white border-success" : "")" 
                                    style="width: 46%; margin: 2%; cursor: pointer;"
                                    @onclick="(()=>ChooseBottle(bottle))">
                                    <div class="container" style="text-align: center;">
                                        <div class="row">
                                            <RadzenImage Path="@bottle.ImgPath" Style="object-fit:cover;" />
                                            <br/>
                                        </div>
                                        <div class="row">
                                            <div class="col-12">
                                                <h4 >@bottle.BottleName</h4> 
                                            </div>
                                        </div>
                                    </div>
                                </RadzenCard>
                            }
                        }
                        </div>
                    </div>
                </div>
            <br/>
            }
        @if (_stepsSelectedIndex == 1)
        {
            <Title Level="2">Size Configuration</Title>
            <div class="row">
                <div class="col">
                    <h4>What is the bottles size(ml)?</h4>
                    <AutoComplete @bind-Value="@_bottleMaxCapacityMl" Options="@_templateBottleSize" Placeholder="Enter Ml Amount"/>
                </div>
            </div>
            <br/>
             
            <div class="row">
                <div>
                    <h4>How full is the bottle? (%)</h4>
                    <Slider TValue="double" Step=10 @bind-Value=@_bottleCurrentMlAmount Min=0 Max=100 DefaultValue="50" TooltipPlacement="@Placement.Top" TipFormatter="(d) => tipFormatter(d)" Disabled=@(_bottleMaxCapacityMl is null)/>
                </div>
            </div>
            <br/>
            <br/>   
        }
            @if(_stepsSelectedIndex == 2)
            {
                <div class="container" style="text-align: center;">
                <h1>Confirmation</h1>
                <br/>
                <div class="row">
                    <RadzenImage Path="@_selectedBottle.ImgPath" Style="max-height: 350px; width: auto; display: block; margin-left: auto; margin-right: auto;"/>
                </div>
                    <br/>
                <div class="row">
                    <h1>@_selectedBottle.BottleName</h1> 
                </div>
                <div class="row">
                    <h2>@($"{_selectedBottle.MaxMl}" + "/" + $"{_selectedBottle.CurrentMl}" + "ml")</h2> 
                </div>
            </div>
            <br/>
            <br/>
            }
    </div>
</Modal>

<style>
.info-div {
  position: absolute;
  width: 90%;
  z-index: 20;
  max-height: 60%;
  overflow-y: scroll;
}
</style>



@code{
    [Parameter] public int BottleSlotId { get; set; }
    [Parameter] public Bottle _selectedBottle { get; set; }
    [Parameter] public List<Bottle> _allBottles { get; set; }
    [Parameter] public EventCallback<Bottle> OnValidSubmit { get; set; }
    //[Parameter] public EventCallback CancelSubmit { get; set; }

    bool _visible = false;
    bool _confirmLoading = false;

    // Modal options to set
    private List<string> _templateBottleSize = new() {"250", "330", "500", "700", "750", "1000", "1500"};
    private string _bottleMaxCapacityMl = null;
    private double _bottleCurrentMlAmount = 100d;
    private bool _bottleSelected = false;

    private bool PrevBtnDisabled = true;
    private bool NextBtnIsConfirmBtn = false;

    private int _stepsSelectedIndex = 0;
    
    // % Slider
    string tipFormatter(double currentEdgeValue)
    {
        return $"{currentEdgeValue}%";
    }


    protected override async Task OnInitializedAsync()
    {
        ShowModal();
    }

    private void ShowModal()
    {
        _visible = true;
    }

    // Executes on Bottle click
    private async Task ChooseBottle(Bottle bottle)
    {
        _selectedBottle = bottle;
        _bottleSelected = true;
    }

    private async Task HandleOk()
    {
        await RefreshSelectedBottle();

        await OnValidSubmit.InvokeAsync(_selectedBottle);

        _confirmLoading = true;
        StateHasChanged();
        _visible = false;
        _confirmLoading = false;
        _bottleSelected = false;
        _stepsSelectedIndex = 0;
    }

    private async Task HandleCancel(MouseEventArgs e)
    {
        await OnValidSubmit.InvokeAsync(null);
        _visible = false;
        _confirmLoading = false;
        StateHasChanged();
        _selectedBottle = null;
        _bottleSelected = false;
        _stepsSelectedIndex = 0;
    }

    private async Task RefreshSelectedBottle()
    {
        _selectedBottle.BottleSlotId = BottleSlotId;
        _selectedBottle.MaxMl = Convert.ToInt32(_bottleMaxCapacityMl);

        // Set Current ML amounts (depending on % full slider)
        if (_bottleCurrentMlAmount != 100)
        {
            _selectedBottle.CurrentMl = (_selectedBottle.CurrentMl * ((int)_bottleCurrentMlAmount / 100));
        }
        else
        {
            _selectedBottle.CurrentMl = _selectedBottle.MaxMl;
        }
    }

    private async Task CreateBottle()
    {
        throw new Exception();
    }

    private async Task IncreaseSelectedIndex()
    {
        if(_stepsSelectedIndex == 2)
        {
            await HandleOk();
            return;
        }
        _stepsSelectedIndex++;
    }    

    private async Task DecreaseSelectedIndex()
    {
        if(_stepsSelectedIndex == 0)
        {
            return;
        }

        _stepsSelectedIndex--;
    }
}
