@using LeDrink.DAL.Interfaces
@using LeDrink.DAL.Models
@inject IUnitOfWork _uow


<div class="modal @ModalClass" tabindex="-1" role="dialog" style="display:@ModalDisplay; width: 100%" >
  <div class="modal-dialog" role="document">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title">@HeaderText</h5>
        <button type="button" class="close btn btn-danger" data-dismiss="modal" aria-label="Close" @onclick="Close">
          <span aria-hidden="true">&times;</span>
        </button>
      </div>
      <div class="modal-body">
        <EditForm Model="@_drink" OnValidSubmit="@SaveChanges">
            <div class="row">
                    <div class="row">
                        <div >
                            <RadzenLabel Text="Name" />
                            <RadzenTextBox style="width: 100%;" @bind-value=_drink.DrinkName />
                            <br />
                        </div>
                    </div>
                    <div class="row">
                        <div >
                            <RadzenLabel Text="Image Path(URL only)" />
                            <RadzenTextBox style="width: 100%;" @bind-value=_drink.ImgPath/>
                            <br />
                        </div>
                    </div>
                    <div class="row">
                        <div>
                            <RadzenLabel Text="Price" />
                            <RadzenNumeric TValue="int?" style="width: 100%;" @bind-value=_drink.Price/>
                            <br />
                        </div>
                    </div>
                    <br/>
                    <div class="row">
                        <div>
                            <h2>Bottle Mix</h2>
                            <hr/>
                        </div>
                        <!-- Mix settings -->
                        @foreach(var mix in _drink.Mixes)
                        {
                            <RadzenDropDown AllowClear="true" TValue="string" Class="w-100" 
                                Data=@(_bottles)
                                Change=@(args => SetSelectedBottle(mix.Bottle.Id)) />
                            <div>
                                <RadzenLabel Text="Amount(ml)" />
                                <RadzenNumeric TValue="double" Min="1" Max="450" style="width: 100%;" @bind-value="mix.Milliliters"/>
                            </div>
                            <br />
                        }
                    </div>
            </div>
        </EditForm>
      </div>
      <div class="modal-footer">
        <button type="submit" class="btn btn-primary">Save changes</button>
        <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="Close">Close</button>
      </div>
    </div>
  </div>
</div>



@code {
    [Parameter] public Drink _drink { get; set; } = new();
    [Parameter] public EventCallback<Drink> OnValidSubmit { get; set; }
    [Parameter] public string HeaderText { get; set; }

    private List<Bottle> _bottles { get; set; }
    private Bottle _selectedBottle { get; set; }

    // Modal Parameters
    public Guid Guid = Guid.NewGuid();
    public string ModalDisplay = "none;";
    public string ModalClass = "";
    public bool ShowBackdrop = true;

    protected override async Task OnInitializedAsync()
    {
        Open();
    }

    private void Open()
    {
        ModalDisplay = "block;";
        ModalClass = "Show";
        ShowBackdrop = true;
        StateHasChanged();
    }

    private void Close()
    {
        ModalDisplay = "none";
        ModalClass = "";
        ShowBackdrop = false;
        StateHasChanged();
    }

    private async Task SetSelectedBottle(int bottleId)
    {
        _selectedBottle = await _uow.DrinkRepo.GetBottle(bottleId);
    }

    private async Task SaveChanges()
    {
        Close();
        await OnValidSubmit.InvokeAsync(_drink);
    }
}

